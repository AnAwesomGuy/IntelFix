buildscript {
    repositories {
        mavenCentral()
        maven { url "https://maven.fabricmc.net" }
        maven { url "https://repo.sleeping.town" }
    }
    dependencies {
        classpath "agency.highlysuspect:voldeloom:2.4"
    }
}

plugins {
    id "com.github.johnrengelman.shadow" version "7.1.+"
}

repositories.maven {
    url 'https://repository.ow2.org/nexus/service/local/repositories/releases/content/'
}

apply plugin: "agency.highlysuspect.voldeloom"

java.toolchain.languageVersion = JavaLanguageVersion.of(11)

version = mod_version
archivesBaseName = 'intelfix'
group = 'net.anawesomguy.intelfix'

sourceSets {
    fake
}

configurations {
    include
}

dependencies {
    var forgeVer = "$minecraft_version-$forge_version"
    minecraft "com.mojang:minecraft:$minecraft_version"
    forge "net.minecraftforge:forge:$forgeVer:universal"
    mappings "net.minecraftforge:forge:$forgeVer:src@zip"

    include compileOnly('org.ow2.asm:asm-tree:9.7.1')

    compileOnly(sourceSets.fake.compileClasspath + sourceSets.fake.output)

    modules.module('org.ow2.asm:asm-all') {
        replacedBy('org.ow2.asm:asm-debug-all')
    }
}

tasks.withType(JavaCompile).configureEach {
    options.with {
//        compilerArgs.addAll '-g:none',  '-Xlint:-options'
        release = 6
    }
}

jar {
    archiveClassifier.set 'slim'
    from 'LICENSE'
    manifest.attributes([
            "FMLCorePlugin": 'net.anawesomguy.intelfix.IntelFixPlugin',
            "Premain-Class": 'net.anawesomguy.intelfix.IntelFixAgent'
    ])
}

processResources {
    inputs.property "version", project.version

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        expand 'version': project.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

shadowJar {
    configurations = [project.configurations.include]
    archiveClassifier.set 'dev-shadow'
    relocate 'org.objectweb.asm', 'net.anawesomguy.shade.asm'
}

assemble.dependsOn shadowJar

remapJarForRelease {
    input.set shadowJar.archiveFile
}

volde {
    runs {
        clientDebug {
            client()
            property "legacy.debugClassLoading", "true"
            property "legacy.debugClassLoadingSave", "true"
        }

        serverDebug {
            server()
            property "legacy.debugClassLoading", "true"
            property "legacy.debugClassLoadingSave", "true"
        }

        configureEach {
            property "fml.log.level", "FINER"
            property "fml.coreMods.load", 'net.anawesomguy.intelfix.IntelFixPlugin'
        }
    }
}